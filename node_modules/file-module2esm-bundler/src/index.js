#!/usr/bin/env node

console.log('哈哈哈');
import { writeFileSync, readdirSync, readFileSync } from 'fs'
import { fileURLToPath } from "url";
import { simple } from 'acorn-walk'
import { getRightValue } from './helpers.js'
import MagicString from 'magic-string'
import path from 'path'
export default function ({
  rootPathKey,
  baseBundleKey,
  bundleRecordKey,
  moduleResolver,
  styleResolver
}) {
  const dependencies = new Set()
  const __dirname = fileURLToPath(import.meta.url)
  const projectDir = path.resolve(__dirname, '../../../../')
  
  let inputOptions, outputOptions, baseDir, mainAST
  const genRecord = text => '\n    `${window.' + rootPathKey +'}' + text + '`,'
  const genImporter = item => `import '${path.resolve(baseDir, item).split(path.sep).join('/')}'\n`

  return {
    name: 'module2esm',
    options(options) {
      inputOptions = { ...options }
      outputOptions = { ...options.output[0] }
      inputOptions.input = path.resolve(projectDir, inputOptions.input)
      return options
    },
    transform(code, id) {
      if (path.extname(id) !== '.js') return
      let esm = ''
      const ast = this.parse(code)
      const jsDep = getRightValue(ast, moduleResolver)
      const cssDep = getRightValue(ast, styleResolver)
      const deps = jsDep.concat(cssDep)
        .filter(item => !inputOptions.external.length || !inputOptions.external[0]?.(item))
        .filter(item => !dependencies.has(item) && dependencies.add(item))
      if (id === inputOptions.input) {
        mainAST = ast
        // 从文件开始要多算一层
        baseDir = path.resolve(inputOptions.input, '../', getRightValue(ast, rootPathKey)[0])
      } else {
        esm = code
      }
      esm = deps.map(genImporter).join('') + esm
      return {
        code: esm,
        map: null
      }
    },
    writeBundle() {
      const outputDirStr = path.posix.dirname(path.posix.normalize(outputOptions.file))
      const rawCode = readFileSync(inputOptions.input, { encoding: 'utf-8' })
      const magicCode = new MagicString(rawCode)
      // 拼接打包记录
      const bundles = readdirSync(path.dirname(path.resolve(projectDir, outputOptions.file)))
      const records = {
        base: `[${bundles.reduce((str, item) => str + genRecord(outputDirStr + path.posix.sep + item), '')}]`,
        bundle: `[${[...dependencies].reduce((str, item) => str + genRecord(item), '')}]`
      }
      simple(mainAST, {
        VariableDeclarator({ id, init }) {
          switch(id.name) {
            case baseBundleKey:
            case bundleRecordKey:
              magicCode.overwrite(init.start, init.end, records[id.name])
              break
          }
        }
      })
      // 写入打包记录
      writeFileSync(inputOptions.input, magicCode.toString())
    }
  }
}